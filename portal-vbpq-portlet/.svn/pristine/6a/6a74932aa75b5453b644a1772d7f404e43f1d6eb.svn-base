/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dtt.portal.dao.vbpq.model.impl;

import com.dtt.portal.dao.vbpq.model.AttachFile;
import com.dtt.portal.dao.vbpq.model.AttachFileModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AttachFile service. Represents a row in the &quot;EPORTAL_ATTACHFILE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.dtt.portal.dao.vbpq.model.AttachFileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttachFileImpl}.
 * </p>
 *
 * @author HuyMQ
 * @see AttachFileImpl
 * @see com.dtt.portal.dao.vbpq.model.AttachFile
 * @see com.dtt.portal.dao.vbpq.model.AttachFileModel
 * @generated
 */
public class AttachFileModelImpl extends BaseModelImpl<AttachFile>
	implements AttachFileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attach file model instance should use the {@link com.dtt.portal.dao.vbpq.model.AttachFile} interface instead.
	 */
	public static final String TABLE_NAME = "EPORTAL_ATTACHFILE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "VANBANID", Types.BIGINT },
			{ "FILEID", Types.BIGINT },
			{ "FILELINK", Types.VARCHAR },
			{ "FILENAME", Types.VARCHAR },
			{ "FILESIZE", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EPORTAL_ATTACHFILE (ID LONG not null primary key,VANBANID LONG,FILEID LONG,FILELINK VARCHAR(75) null,FILENAME VARCHAR(75) null,FILESIZE VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table EPORTAL_ATTACHFILE";
	public static final String ORDER_BY_JPQL = " ORDER BY attachFile.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EPORTAL_ATTACHFILE.ID ASC";
	public static final String DATA_SOURCE = "ePortalDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dtt.portal.dao.vbpq.model.AttachFile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dtt.portal.dao.vbpq.model.AttachFile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.dtt.portal.dao.vbpq.model.AttachFile"),
			true);
	public static long VANBANID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.dtt.portal.dao.vbpq.model.AttachFile"));

	public AttachFileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AttachFile.class;
	}

	@Override
	public String getModelClassName() {
		return AttachFile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("vanBanId", getVanBanId());
		attributes.put("fileId", getFileId());
		attributes.put("fileLink", getFileLink());
		attributes.put("fileName", getFileName());
		attributes.put("fileSize", getFileSize());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long vanBanId = (Long)attributes.get("vanBanId");

		if (vanBanId != null) {
			setVanBanId(vanBanId);
		}

		Long fileId = (Long)attributes.get("fileId");

		if (fileId != null) {
			setFileId(fileId);
		}

		String fileLink = (String)attributes.get("fileLink");

		if (fileLink != null) {
			setFileLink(fileLink);
		}

		String fileName = (String)attributes.get("fileName");

		if (fileName != null) {
			setFileName(fileName);
		}

		String fileSize = (String)attributes.get("fileSize");

		if (fileSize != null) {
			setFileSize(fileSize);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getVanBanId() {
		return _vanBanId;
	}

	@Override
	public void setVanBanId(long vanBanId) {
		_columnBitmask |= VANBANID_COLUMN_BITMASK;

		if (!_setOriginalVanBanId) {
			_setOriginalVanBanId = true;

			_originalVanBanId = _vanBanId;
		}

		_vanBanId = vanBanId;
	}

	public long getOriginalVanBanId() {
		return _originalVanBanId;
	}

	@Override
	public long getFileId() {
		return _fileId;
	}

	@Override
	public void setFileId(long fileId) {
		_fileId = fileId;
	}

	@Override
	public String getFileLink() {
		if (_fileLink == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileLink;
		}
	}

	@Override
	public void setFileLink(String fileLink) {
		_fileLink = fileLink;
	}

	@Override
	public String getFileName() {
		if (_fileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		_fileName = fileName;
	}

	@Override
	public String getFileSize() {
		if (_fileSize == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileSize;
		}
	}

	@Override
	public void setFileSize(String fileSize) {
		_fileSize = fileSize;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AttachFile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AttachFile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AttachFile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttachFileImpl attachFileImpl = new AttachFileImpl();

		attachFileImpl.setId(getId());
		attachFileImpl.setVanBanId(getVanBanId());
		attachFileImpl.setFileId(getFileId());
		attachFileImpl.setFileLink(getFileLink());
		attachFileImpl.setFileName(getFileName());
		attachFileImpl.setFileSize(getFileSize());

		attachFileImpl.resetOriginalValues();

		return attachFileImpl;
	}

	@Override
	public int compareTo(AttachFile attachFile) {
		long primaryKey = attachFile.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AttachFile)) {
			return false;
		}

		AttachFile attachFile = (AttachFile)obj;

		long primaryKey = attachFile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AttachFileModelImpl attachFileModelImpl = this;

		attachFileModelImpl._originalVanBanId = attachFileModelImpl._vanBanId;

		attachFileModelImpl._setOriginalVanBanId = false;

		attachFileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AttachFile> toCacheModel() {
		AttachFileCacheModel attachFileCacheModel = new AttachFileCacheModel();

		attachFileCacheModel.id = getId();

		attachFileCacheModel.vanBanId = getVanBanId();

		attachFileCacheModel.fileId = getFileId();

		attachFileCacheModel.fileLink = getFileLink();

		String fileLink = attachFileCacheModel.fileLink;

		if ((fileLink != null) && (fileLink.length() == 0)) {
			attachFileCacheModel.fileLink = null;
		}

		attachFileCacheModel.fileName = getFileName();

		String fileName = attachFileCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			attachFileCacheModel.fileName = null;
		}

		attachFileCacheModel.fileSize = getFileSize();

		String fileSize = attachFileCacheModel.fileSize;

		if ((fileSize != null) && (fileSize.length() == 0)) {
			attachFileCacheModel.fileSize = null;
		}

		return attachFileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", vanBanId=");
		sb.append(getVanBanId());
		sb.append(", fileId=");
		sb.append(getFileId());
		sb.append(", fileLink=");
		sb.append(getFileLink());
		sb.append(", fileName=");
		sb.append(getFileName());
		sb.append(", fileSize=");
		sb.append(getFileSize());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.dtt.portal.dao.vbpq.model.AttachFile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vanBanId</column-name><column-value><![CDATA[");
		sb.append(getVanBanId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileId</column-name><column-value><![CDATA[");
		sb.append(getFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileLink</column-name><column-value><![CDATA[");
		sb.append(getFileLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileName</column-name><column-value><![CDATA[");
		sb.append(getFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileSize</column-name><column-value><![CDATA[");
		sb.append(getFileSize());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AttachFile.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AttachFile.class
		};
	private long _id;
	private long _vanBanId;
	private long _originalVanBanId;
	private boolean _setOriginalVanBanId;
	private long _fileId;
	private String _fileLink;
	private String _fileName;
	private String _fileSize;
	private long _columnBitmask;
	private AttachFile _escapedModel;
}